/*
 * Mixins and functions libary
 *
 * @author Full Name of Author <author@email.com>
 * @version yyy-mm-dd (Date of latest edit)
 */

 /*******************************************/
/* CONTENTS */
/*******************************************/
/*
* RESET Reset default browser styling
* SHARED Shared elements across modules and layout
* MAIN html, body
* LAYOUT header, footer, wrapper, etc.
*/



// /*******************************************/
// $_HELPERS
// /*******************************************/
// Mixins
//  Usage:
//    .foo {
//        @include bar();
//        ...
//    }

// Micro Clearfix
@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

// Facebook App dimensions
@mixin facebook-app() {
    width:100%;
    position:relative;
    @media #{$media-facebook-desktop} {
        width:810px;
        overflow-x:hidden;
        margin:0 auto;
    }
}

// Font-face
// Read: http://coding.smashingmagazine.com/2013/02/14/setting-weights-and-styles-at-font-face-declaration/
// Make sure to define the proper font name, and dont use font-weight / font-style
//  Usage:
//    _typography.scss:
//        @include font-face('Gill-Sans-Regular', 'Gill-Sans-MT-Pro');
//        -and/or-
//        @include font-face('Gill-Sans-Light', 'Gill-Sans-MT-Pro-Light');
//        -and/or-
//        @include font-face('Gill-Sans-Italic', 'Gill-Sans-MT-Pro-Italic');
//        -and/or-
//        @include font-face('Gill-Sans-Bold', 'Gill-Sans-MT-Pro-Bold');
//        -and/or-
//        @include font-face('Gill-Sans-Bold-Italic', 'Gill-Sans-MT-Pro-Bold-Italic');
//        -etc-
//
//        h1 {
//            font-family: Gill-Sans-Bold-Italic;
//            -etc-
//        }

@mixin font-face($font-family, $font-filename) {
    @font-face {
        font-family: '#{$font-family}';
        src: url(/fonts/('#{$font-filename}.eot'));
        src: url(/fonts/('#{$font-filename}.eot?#iefix')) format('embedded-opentype'),
        url(/fonts/('#{$font-filename}.woff')) format('woff'),
        url(/fonts/('#{$font-filename}.ttf')) format('truetype'),
        url(/fonts/('#{$font-filename}.svg##{$font-family}')) format('svg');
        font-weight: normal;
        font-style: normal;
    }
}

// Functions

// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value)  {
  $value: strip-unit($value) / strip-unit($em-base) * 1em;
  @if ($value == 0em) { $value: 0; } // Turn 0em into 0
  @return $value;
}

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#)
// Just enter the number, no need to mention "px"
@function emCalc($values...) {
  $max: length($values); // Get the total number of parameters passed

  // If there is only 1 parameter, then return it as an integer.
  // This is done because a list can't be multiplied or divided even if it contains a single value
  @if $max == 1 { @return convert-to-em(nth($values, 1)); }

  $emValues: (); // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i)));
  }
  @return $emValues;
}


